CREATE OR REPLACE DATABASE DEMO;

USE DEMO;

CREATE TABLE PERSONA(
    CC_PERSONA INT NOT NULL PRIMARY KEY,
    NOMBRES_PERSONA VARCHAR(40) NOT NULL,
    APELLIDOS_PERSONA VARCHAR(40) NOT NULL,
    FECHANTO_PERSONA DATE NOT NULL,
    EDAD_PERSONA INT NOT NULL DEFAULT 0,
    TELEFONO_PERSONA VARCHAR(11) NOT NULL,
    CORREO_PERSONA VARCHAR(45) NOT NULL,
    DIRECCION_PERSONA VARCHAR(45) NOT NULL
) ENGINE=INNODB;

CREATE TABLE CREDENCIALES(
    ID_CREDENCIALES INT AUTO_INCREMENT PRIMARY KEY,
    USUARIO_CREDENCIALES VARCHAR(15),
    CONTRASENA_CREDENCIALES VARCHAR(255),
    ESTADO_CREDENCIALES ENUM('A','I')
)ENGINE= INNODB;

INSERT INTO CREDENCIALES(USUARIO_CREDENCIALES, CONTRASENA_CREDENCIALES, ESTADO_CREDENCIALES) VALUES
('ADMIN', 'ADMIN1', 'A');

CREATE TABLE EMPLEADO(
    ID_EMPLEADO INT AUTO_INCREMENT PRIMARY KEY,
    CARGO_EMPLEADO VARCHAR(15) NOT NULL,
    ESTADO_EMPLEADO ENUM('A','I'),
    FK_ID_PERSONA INT NOT NULL,
    FK_ID_CREDENCIALES INT NOT NULL,
    FOREIGN KEY (FK_ID_PERSONA) REFERENCES PERSONA(CC_PERSONA),
    FOREIGN KEY (FK_ID_CREDENCIALES) REFERENCES CREDENCIALES(ID_CREDENCIALES)
)ENGINE= INNODB;

CREATE TABLE CLIENTE(
    ID_CLIENTE INT AUTO_INCREMENT PRIMARY KEY,
    ESTADO_CLIENTE ENUM('A','I'),
    FK_ID_PERSONA INT NOT NULL,
    FOREIGN KEY (FK_ID_PERSONA) REFERENCES PERSONA(CC_PERSONA)
)ENGINE= INNODB;

CREATE TABLE TIPOVEHICULO(
    ID_TIPOVEHI INT PRIMARY KEY,
    NOMBRE_TIPOVEHI VARCHAR(15) NOT NULL,
    ESTADO_TIPOVEHI ENUM('A','I')
)ENGINE= INNODB;

INSERT INTO TIPOVEHICULO(ID_TIPOVEHI, NOMBRE_TIPOVEHI, ESTADO_TIPOVEHI) VALUES
(1, 'AUTOMOVIL', 'A'),
(2, 'MOTOCICLETA', 'A');

CREATE TABLE CATVEHICULO(
    ID_CATVEHICULO INT PRIMARY KEY,
    FK_ID_TIPOVEHI INT NOT NULL,
    NOMBRE_CATVEHICULO VARCHAR(20) NOT NULL,
    ESTADO_CATVEHICULO ENUM('A', 'I') NOT NULL,
    FOREIGN KEY (FK_ID_TIPOVEHI) REFERENCES TIPOVEHICULO(ID_TIPOVEHI)
);

INSERT INTO CATVEHICULO(ID_CATVEHICULO, FK_ID_TIPOVEHI, NOMBRE_CATVEHICULO, ESTADO_CATVEHICULO) VALUES
(1, 1, 'AUTOMOVIL', 'A'),
(2, 1, 'CAMIONETA', 'A'),
(3, 1, 'CAMPERO', 'A'),
(4, 1, 'AUTOBUS', 'A'),
(5, 2, 'SCOOTER', 'A'),
(6, 2, 'URBANAS CC200', 'A'),
(7, 2, 'MAXISCOOTER', 'A'),
(8, 2, 'CARRETERA CC250', 'A'),
(9, 2, 'MOTOCROSS', 'A');


CREATE TABLE VEHICULO(
    PLACA_VEHICULO VARCHAR(6) PRIMARY KEY,
    FK_ID_CLIENTE INT NOT NULL,
    FK_ID_CATVEHICULO INT NOT NULL,
    MARCA_VEHICULO VARCHAR(20) NOT NULL,
    MODELO_VEHICULO VARCHAR(20) NOT NULL,
    ANIO_VEHICULO INT,
    ESTADO_VEHICULO ENUM('A', 'I'),
    FOREIGN KEY (FK_ID_CATVEHICULO) REFERENCES CATVEHICULO(ID_CATVEHICULO),
    FOREIGN KEY (FK_ID_CLIENTE) REFERENCES CLIENTE(ID_CLIENTE)
)ENGINE= INNODB;

CREATE TABLE RESERVA(
    ID_RESERVA INT AUTO_INCREMENT PRIMARY KEY,
    FECHA_RESERVA DATE NOT NULL,
    HORA_RESERVA VARCHAR(8) NOT NULL,
    ESTADO_RESERVA ENUM('A', 'F', 'C'),
    FK_ID_VEHICULO VARCHAR(6) NOT NULL,
    FK_ID_EMPLEADO INT NOT NULL,
    FOREIGN KEY (FK_ID_VEHICULO) REFERENCES VEHICULO(PLACA_VEHICULO),
    FOREIGN KEY (FK_ID_EMPLEADO) REFERENCES EMPLEADO(ID_EMPLEADO)
)ENGINE= INNODB;

CREATE TABLE MOTIVOM(
    ID_MOTIVOM INT PRIMARY KEY,
    NOMBRE_MOTIVOM VARCHAR(50) NOT NULL,
    ESTADO_MOTIVOM ENUM('A', 'I')
);

INSERT INTO MOTIVOM(ID_MOTIVOM, NOMBRE_MOTIVOM, ESTADO_MOTIVOM) VALUES
(1, 'CANCELACION CON ANTICIPACIÓN', 'A'),
(2, 'CANCELACION DESPUES DE LA HORA PERMITIDA', 'A'),
(3, 'CLIENTE NO LLEGO', 'A');

CREATE TABLE MULTA(
    ID_MULTA INT AUTO_INCREMENT PRIMARY KEY,
    FECHA_MULTA  DATE DEFAULT CURDATE(),
    FK_ID_MOTIVOM INT NOT NULL,
    VALOR_MULTA DOUBLE DEFAULT 0,
    FK_ID_RESERVA INT NOT NULL,
    FOREIGN KEY (FK_ID_MOTIVOM) REFERENCES MOTIVOM(ID_MOTIVOM),
    FOREIGN KEY (FK_ID_RESERVA) REFERENCES RESERVA(ID_RESERVA)
);

CREATE TABLE TIPOSERVICIO(
    ID_TIPOSER INT AUTO_INCREMENT PRIMARY KEY,
    NOMBRE_TIPOSER VARCHAR(20) NOT NULL,
    VALOR_TIPOSER DOUBLE DEFAULT 0,
    ESTADO_TIPOSER ENUM('V', 'M'),
    DESCRIPCION_TIPOSER VARCHAR(130) NOT NULL
) ENGINE=INNODB;

CREATE TABLE CTG_TPSERVICIO(
    ID_CTGTPSERVICIO INT AUTO_INCREMENT PRIMARY KEY,
    FK_ID_CATVEHICULO INT NOT NULL,
    FK_ID_TIPOSER INT NOT NULL,
    VALOR_CTGTPSERVICIO DOUBLE DEFAULT 0,
    FOREIGN KEY (FK_ID_CATVEHICULO) REFERENCES CATVEHICULO(ID_CATVEHICULO),
    FOREIGN KEY (FK_ID_TIPOSER) REFERENCES TIPOSERVICIO(ID_TIPOSER)
);
CREATE TABLE SERVICIO(
    ID_SERVICIO INT AUTO_INCREMENT PRIMARY KEY,
    ESTADO_SERVICIO ENUM('A', 'I'),
    FK_ID_RESERVA INT NOT NULL,
    FK_ID_CTGTPSERVICIO INT NOT NULL,
    FOREIGN KEY (FK_ID_RESERVA) REFERENCES RESERVA(ID_RESERVA),
    FOREIGN KEY (FK_ID_CTGTPSERVICIO) REFERENCES CTG_TPSERVICIO(ID_CTGTPSERVICIO)
)ENGINE= INNODB;

CREATE TABLE PRODUCTOADICIONAL(
    ID_PRODUCTOADD INT AUTO_INCREMENT PRIMARY KEY,
    NOMBRE_PRODUCTOADD VARCHAR(30) NOT NULL,
    PRECIO_PRODUCTOADD DOUBLE DEFAULT 0,
    CANTIDAD_PRODUCTOADD INT DEFAULT 0,
    DESCRIPCION_PRODUCTOADD VARCHAR(130),
    ESTADO_PRODUCTOADD ENUM('A','I')
);

CREATE TABLE SERVPROADD(
    FK_ID_SERVICIO INT NOT NULL,
    FK_ID_PRODUCTOADD INT NOT NULL,
    CANTIDAD_SERVPROADD INT NOT NULL,
    COSTO_SERVPROADD DOUBLE DEFAULT 0,
    FOREIGN KEY (FK_ID_SERVICIO) REFERENCES SERVICIO(ID_SERVICIO),
    FOREIGN KEY (FK_ID_PRODUCTOADD) REFERENCES PRODUCTOADICIONAL(ID_PRODUCTOADD)
);

CREATE TABLE FACTURASERVICIO(
    ID_FACTURASER INT AUTO_INCREMENT PRIMARY KEY,
    FECHA_FACTURASER DATE DEFAULT CURDATE(),
    VALOR_FACTURASER DOUBLE DEFAULT 0,
    ESTADO_FACTURASER ENUM('A','P'),
    FK_ID_SERVICIO INT NOT NULL,
    FOREIGN KEY (FK_ID_SERVICIO) REFERENCES SERVICIO(ID_SERVICIO)
);

CREATE TABLE TIPOMETODOPAGO(
    ID_TIPOMETODOPAGO INT PRIMARY KEY,
    NOMBRE_TIPOMETODOPAGO VARCHAR(25) NOT NULL,
    ESTADO_TIPOMETODOPAGO ENUM('A','I')
);

INSERT INTO TIPOMETODOPAGO(ID_TIPOMETODOPAGO, NOMBRE_TIPOMETODOPAGO, ESTADO_TIPOMETODOPAGO) VALUES
(1, 'EFECTIVO', 'A'),
(2, 'TARJETA', 'A'),
(3, 'NEQUI', 'A');

CREATE TABLE METODOPAGO(
    ID_METODOPAGO INT AUTO_INCREMENT PRIMARY KEY,
    FK_ID_TIPOMETODOPAGO INT NOT NULL,
    FK_ID_FACTURASER INT NOT NULL,
    FOREIGN KEY (FK_ID_TIPOMETODOPAGO) REFERENCES TIPOMETODOPAGO(ID_TIPOMETODOPAGO),
    FOREIGN KEY (FK_ID_FACTURASER) REFERENCES FACTURASERVICIO(ID_FACTURASER)
);

CREATE TABLE AUDITORIA_CREDENCIALES (
    ID_AUDITORIA INT AUTO_INCREMENT PRIMARY KEY,
    NOMBRES_PERSONA VARCHAR(40),
    APELLIDOS_PERSONA VARCHAR(40),
    USUARIO_ANTERIOR VARCHAR(15),
    CONTRASENA_ANTERIOR VARCHAR(255),
    ESTADO_ANTERIOR ENUM('A','I'),
    FECHA_MODIFICACION TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    NUEVO_USUARIO VARCHAR(15),
    NUEVA_CONTRASENA VARCHAR(255),
    NUEVO_ESTADO ENUM('A','I'),
    OPERACION VARCHAR(10),
    MODIFICADO_POR VARCHAR(50)
) ENGINE=INNODB;

CREATE TABLE AUDITORIA_ELIMINACION_CLIENTE (
    ID_AUDITORIA INT AUTO_INCREMENT PRIMARY KEY,
    CC_PERSONA INT,
    NOMBRES_PERSONA VARCHAR(40),
    APELLIDOS_PERSONA VARCHAR(40),
    PLACAS_VEHICULOS TEXT,
    RESERVAS_INFO TEXT,
    OPERACION VARCHAR(10),
    FECHA TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    USUARIO_CREDENCIAL VARCHAR(50)
) ENGINE=INNODB;

CREATE TABLE AUDITORIA_RESERVA (
    ID_AUDITORIA INT AUTO_INCREMENT PRIMARY KEY,
    ID_RESERVA INT,
    FECHA_RESERVA DATE,
    HORA_RESERVA VARCHAR(8),
    PLACA_VEHICULO VARCHAR(6),
    NOMBRES_CLIENTE VARCHAR(40),
    APELLIDOS_CLIENTE VARCHAR(40),
    NOMBRES_EMPLEADO VARCHAR(40),
    APELLIDOS_EMPLEADO VARCHAR(40),
    FECHA_MODIFICACION TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    NOMBRE_MOTIVOM VARCHAR(50),
    USUARIO_CREDENCIALES VARCHAR(15),
    OPERACION VARCHAR(20)
);


---PROCEDMINETOS ALMACENADOS
---LOGIN
/*
DELIMITER //
CREATE PROCEDURE Login(
    IN p_username VARCHAR(10), 
    OUT p_password_hash VARCHAR(100))
BEGIN
    SELECT CONTRASENA_CREDENCIALES INTO p_password_hash
    FROM CREDENCIALES
    WHERE USUARIO_CREDENCIALES = p_username;
END//
DELIMITER ;
*/
DELIMITER //
CREATE PROCEDURE LOGIN(
    IN usuario VARCHAR(10),
    IN contrasena VARCHAR(100))
BEGIN
    DECLARE credenciales_activas INT;
    SELECT COUNT(*) INTO credenciales_activas FROM credenciales WHERE usuario_credenciales = usuario AND contrasena_credenciales = contrasena AND estado_credenciales = 'A';

    IF credenciales_activas > 0 THEN
        SELECT usuario_credenciales, contrasena_credenciales FROM credenciales WHERE usuario_credenciales = usuario AND contrasena_credenciales = contrasena AND estado_credenciales = 'A';
    ELSE
        SELECT 'Credenciales no activas' AS mensaje;
    END IF;
END //
DELIMITER ;


---REGISTROS
DELIMITER //
CREATE PROCEDURE REGISTRARPERSONA(
    IN p_cc INT,
    IN p_nombres VARCHAR(40),
    IN p_apellidos VARCHAR(40),
    IN p_fechanto DATE,
    IN p_telefono VARCHAR(11),
    IN p_correo VARCHAR(45),
    IN p_direccion VARCHAR(45)
)
BEGIN
    DECLARE last_insert_id INT;
    INSERT INTO PERSONA (CC_PERSONA, NOMBRES_PERSONA, APELLIDOS_PERSONA, FECHANTO_PERSONA, TELEFONO_PERSONA,  CORREO_PERSONA, DIRECCION_PERSONA)
    VALUES (p_cc, p_nombres, p_apellidos, p_fechanto, p_telefono, p_correo, p_direccion);
END//
DELIMITER ;

DELIMITER //
CREATE PROCEDURE REGISTRAREMPLEADO(
    IN p_cc_persona INT,
    IN c_usuario_credenciales VARCHAR(15),
    IN c_contrasena_credenciales VARCHAR(20),
    IN c_estado_credenciales ENUM('A','I'),
    IN e_cargo_empleado VARCHAR(15),
    IN e_estado_empleado ENUM('A','I')
)
BEGIN
    DECLARE persona_existente INT;
    DECLARE credenciales_id INT;
    SELECT CC_PERSONA INTO persona_existente FROM PERSONA WHERE CC_PERSONA = p_cc_persona;
    IF persona_existente IS NOT NULL THEN
        -- Insertar credenciales para el empleado
        INSERT INTO CREDENCIALES (USUARIO_CREDENCIALES, CONTRASENA_CREDENCIALES, ESTADO_CREDENCIALES)
        VALUES (c_usuario_credenciales, c_contrasena_credenciales, c_estado_credenciales);
        -- Obtener el ID de las credenciales recién insertadas
        SELECT LAST_INSERT_ID() INTO credenciales_id;
        -- Insertar el empleado
        INSERT INTO EMPLEADO (CARGO_EMPLEADO, ESTADO_EMPLEADO, FK_ID_PERSONA, FK_ID_CREDENCIALES)
        VALUES (e_cargo_empleado, 'A', p_cc_persona, credenciales_id);
    ELSE
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'La persona no existe';
    END IF;
END//
DELIMITER ;

DELIMITER //
CREATE PROCEDURE REGISTRARCLIENTE(
    IN p_cc_persona INT
)
BEGIN
    DECLARE persona_existente INT;
    SELECT CC_PERSONA INTO persona_existente FROM PERSONA WHERE CC_PERSONA = p_cc_persona;
    -- Si la persona existe, insertar en cliente
    IF persona_existente IS NOT NULL THEN
        INSERT INTO CLIENTE (ESTADO_CLIENTE, FK_ID_PERSONA)
        VALUES ('A', p_cc_persona);
    ELSE
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'La persona no existe';
    END IF;
END//
DELIMITER ;

DELIMITER //
CREATE PROCEDURE REGISTRARVEHICULO(
    IN c_id_cliente INT,
    IN v_cate_vehi INT,
    IN v_placa VARCHAR(6),
    IN v_marca VARCHAR(20),
    IN v_modelo VARCHAR(20),
    IN v_anio INT,
    IN v_estado ENUM('A', 'I')
)
BEGIN
    DECLARE placa_existente INT;
    SELECT PLACA_VEHICULO INTO placa_existente FROM VEHICULO WHERE PLACA_VEHICULO = v_placa;
    IF placa_existente IS NULL THEN
        INSERT INTO VEHICULO (FK_ID_CLIENTE, FK_ID_CATVEHICULO, PLACA_VEHICULO, MARCA_VEHICULO, MODELO_VEHICULO, ANIO_VEHICULO, ESTADO_VEHICULO)
    VALUES (c_id_cliente, v_cate_vehi, v_placa, v_marca, v_modelo, v_anio, v_estado);
    ELSE
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Vehiculo no existe';
    END IF;
END//
DELIMITER ;

DELIMITER //
CREATE PROCEDURE REGISTRARTPSERVICIO(
    IN tp_nombre VARCHAR(20),
    IN tp_valor DOUBLE,
    IN tp_estado ENUM('M','V'),
    IN tp_descripcion VARCHAR(100)
)
BEGIN
    INSERT INTO TIPOSERVICIO (NOMBRE_TIPOSER, VALOR_TIPOSER, ESTADO_TIPOSER, DESCRIPCION_TIPOSER)
    VALUES (tp_nombre, tp_valor, tp_estado, tp_descripcion);
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE REGISTRARRESERVA(
    IN r_fecha_reserva DATE,
    IN r_hora_reserva VARCHAR(8),
    IN r_fk_id_vehiculo VARCHAR(6),
    IN r_fk_id_empleado INT,
    OUT r_id_reserva INT
)
BEGIN
    INSERT INTO RESERVA (FECHA_RESERVA, HORA_RESERVA, ESTADO_RESERVA, FK_ID_VEHICULO, FK_ID_EMPLEADO)
    VALUES (r_fecha_reserva, r_hora_reserva, 'A', r_fk_id_vehiculo, r_fk_id_empleado);
    SET r_id_reserva = LAST_INSERT_ID();
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE REGISTRARCTGTPSERVICIO(
    IN p_FK_ID_CATVEHICULO INT,
    IN p_FK_ID_TIPOSER INT,
    OUT p_ID_CTGTPSERVICIO INT
)
BEGIN
    DECLARE v_Valor_CTGTPSERVICIO DOUBLE;
    -- Calcular el valor del servicio
    SET v_Valor_CTGTPSERVICIO = VALOR_CATGTPSERVI(p_FK_ID_TIPOSER, p_FK_ID_CATVEHICULO);

    INSERT INTO CTG_TPSERVICIO (FK_ID_CATVEHICULO, FK_ID_TIPOSER, VALOR_CTGTPSERVICIO)
    VALUES (p_FK_ID_CATVEHICULO, p_FK_ID_TIPOSER, v_Valor_CTGTPSERVICIO);

    SET p_ID_CTGTPSERVICIO = LAST_INSERT_ID();
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE REGISTRARSERVICIO(
    IN p_estado_servicio ENUM('A', 'I'),
    IN p_fk_id_reserva INT,
    IN p_fk_id_ctgtpservicio INT
)
BEGIN
    INSERT INTO SERVICIO (ESTADO_SERVICIO, FK_ID_RESERVA, FK_ID_CTGTPSERVICIO)
    VALUES ('A', p_fk_id_reserva, p_fk_id_ctgtpservicio);
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE REGISTRARPRODUCTOADD(
    IN p_nombre_productoadd VARCHAR(30),
    IN p_precio_productoadd DOUBLE,
    IN p_cantidad_productoadd INT,
    IN p_descripcion_productoadd VARCHAR(130)
)
BEGIN
    INSERT INTO PRODUCTOADICIONAL (NOMBRE_PRODUCTOADD, PRECIO_PRODUCTOADD, CANTIDAD_PRODUCTOADD, DESCRIPCION_PRODUCTOADD, ESTADO_PRODUCTOADD)
    VALUES (p_nombre_productoadd, p_precio_productoadd, p_cantidad_productoadd, p_descripcion_productoadd, 'A');
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE REGISTRARMULTA(
    IN m_fk_id_motivom INT,
    IN m_valor_multa DOUBLE,
    IN m_fk_id_reserva INT
)
BEGIN
    INSERT INTO MULTA (FK_ID_MOTIVOM, VALOR_MULTA, FK_ID_RESERVA)
    VALUES (m_fk_id_motivom, m_valor_multa, m_fk_id_reserva);
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE REGISTRARSERVPROADD(
    IN p_fk_id_servicio INT,
    IN p_fk_id_productoadd INT,
    IN p_cantidad_sevproadd INT,
    IN p_costo_servproadd DOUBLE
)
BEGIN
    DECLARE v_CantidadExistente INT;
    -- Obtiene la cantidad actual del producto adicional
    SELECT CANTIDAD_PRODUCTOADD INTO v_CantidadExistente
    FROM PRODUCTOADICIONAL
    WHERE ID_PRODUCTOADD = p_fk_id_productoadd;
    -- Actualiza la cantidad del producto adicional restando la cantidad usada en el servicio
    UPDATE PRODUCTOADICIONAL
    SET CANTIDAD_PRODUCTOADD = v_CantidadExistente - p_cantidad_sevproadd
    WHERE ID_PRODUCTOADD = p_fk_id_productoadd;
    -- Inserta el registro en SERVPROADD
    INSERT INTO SERVPROADD (FK_ID_SERVICIO, FK_ID_PRODUCTOADD, CANTIDAD_SERVPROADD, COSTO_SERVPROADD)
    VALUES (p_fk_id_servicio, p_fk_id_productoadd, p_cantidad_sevproadd, p_costo_servproadd);
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE REGISTRARFACTURASERVICIO(
    IN p_fk_id_servicio INT
)
BEGIN
    INSERT INTO FACTURASERVICIO (ESTADO_FACTURASER, FK_ID_SERVICIO)
    VALUES ('A', p_fk_id_servicio);
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE RegistrarMetodoPago(
    IN p_fk_id_tipometodopago INT,
    IN p_fk_id_facturaser INT
)
BEGIN
    -- Insertar el nuevo método de pago
    INSERT INTO METODOPAGO (FK_ID_TIPOMETODOPAGO, FK_ID_FACTURASER)
    VALUES (p_fk_id_tipometodopago, p_fk_id_facturaser);
    
    -- Actualizar el estado de la factura a 'P'
    UPDATE FACTURASERVICIO
    SET ESTADO_FACTURASER = 'P'
    WHERE ID_FACTURASER = p_fk_id_facturaser;
END //
DELIMITER ;



-----UPDATE
DELIMITER //
CREATE PROCEDURE UPDATECLIENTE(
    IN c_idCliente INT,
    IN p_estadoCliente ENUM('A','I'),
    IN p_nombresPersona VARCHAR(40),
    IN p_apellidosPersona VARCHAR(40),
    IN p_fechaNacimiento DATE,
    IN p_telefonoPersona VARCHAR(11),
    IN p_correoPersona VARCHAR(45),
    IN p_direccionPersona VARCHAR(45)
)
BEGIN
    UPDATE PERSONA P
    INNER JOIN CLIENTE C ON P.CC_PERSONA = C.FK_ID_PERSONA
    SET
        C.ESTADO_CLIENTE = p_estadoCliente,
        P.NOMBRES_PERSONA = p_nombresPersona,
        P.APELLIDOS_PERSONA = p_apellidosPersona,
        FECHANTO_PERSONA = p_fechaNacimiento,
        P.TELEFONO_PERSONA = p_telefonoPersona,
        P.CORREO_PERSONA = p_correoPersona,
        P.DIRECCION_PERSONA = p_direccionPersona
    WHERE CC_PERSONA = (
        SELECT FK_ID_PERSONA
        FROM CLIENTE C
        WHERE  C.ID_CLIENTE = c_idCliente
    );
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE UPDATEEMPLEADO(
    IN e_idEmpleado INT,
    IN e_estadoEmpleado ENUM('A','I'),
    IN p_nombresPersona VARCHAR(40),
    IN p_apellidosPersona VARCHAR(40),
    IN p_fechaNacimiento DATE,
    IN p_telefonoPersona VARCHAR(11),
    IN p_correoPersona VARCHAR(45),
    IN p_direccionPersona VARCHAR(45),
    IN c_usuarioCredenciales VARCHAR(15),
    IN c_contrasenaCredenciales VARCHAR(20),
    IN e_cargoEmpleado VARCHAR(15)
)
BEGIN
    DECLARE estadoCredenciales CHAR(1);
    IF e_estadoEmpleado = 'I' OR e_cargoEmpleado = 'LAVADOR' THEN
        SET estadoCredenciales = 'I';
    ELSE
        SET estadoCredenciales = 'A';
    END IF;

    UPDATE EMPLEADO AS E
    INNER JOIN PERSONA AS P ON E.FK_ID_PERSONA = p.CC_PERSONA
    INNER JOIN CREDENCIALES AS CR ON E.FK_ID_CREDENCIALES = CR.ID_CREDENCIALES
    SET E.CARGO_EMPLEADO = e_cargoEmpleado,
        E.ESTADO_EMPLEADO = e_estadoEmpleado,
        P.NOMBRES_PERSONA = p_nombresPersona,
        P.APELLIDOS_PERSONA = p_apellidosPersona,
        P.FECHANTO_PERSONA = p_fechaNacimiento,
        P.TELEFONO_PERSONA = p_telefonoPersona,
        P.CORREO_PERSONA = p_correoPersona,
        P.DIRECCION_PERSONA = p_direccionPersona,
        CR.USUARIO_CREDENCIALES = c_usuarioCredenciales,
        CR.CONTRASENA_CREDENCIALES = c_contrasenaCredenciales,
        CR.ESTADO_CREDENCIALES = estadoCredenciales
    WHERE E.ID_EMPLEADO = e_idEmpleado;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE UPDATERESERVA(
    IN r_id_servicio INT,
    IN r_fecha_reserva DATE,
    IN r_hora_reserva VARCHAR(8),
    IN r_id_empleado INT,
    IN cts_id_tipo_servicio INT
)
BEGIN
    -- Actualizar la tabla RESERVA y CTG_TPSERVICIO utilizando inner joins
    UPDATE RESERVA AS R
    INNER JOIN SERVICIO AS S ON R.ID_RESERVA = S.FK_ID_RESERVA
    INNER JOIN CTG_TPSERVICIO AS C ON S.FK_ID_CTGTPSERVICIO = C.ID_CTGTPSERVICIO
    SET
        R.FECHA_RESERVA = r_fecha_reserva,
        R.HORA_RESERVA = r_hora_reserva,
        R.FK_ID_EMPLEADO = r_id_empleado,
        C.FK_ID_TIPOSER = cts_id_tipo_servicio
    WHERE
        S.ID_SERVICIO = r_id_servicio;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE UPDATEESTADORESERVA(
    IN p_fk_id_reserva INT
)
BEGIN
    UPDATE RESERVA
    SET ESTADO_RESERVA = 'F'
    WHERE ID_RESERVA = p_fk_id_reserva;

END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE UPDATETIPOSERVICIO(
    IN p_id INT,
    IN p_nombre VARCHAR(20),
    IN p_valor DOUBLE,
    IN p_estado ENUM('V', 'M'),
    IN p_descripcion VARCHAR(130)
)
BEGIN
    UPDATE TIPOSERVICIO
    SET NOMBRE_TIPOSER = p_nombre,
        VALOR_TIPOSER = p_valor,
        ESTADO_TIPOSER = p_estado,
        DESCRIPCION_TIPOSER = p_descripcion
    WHERE ID_TIPOSER = p_id;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE UPDATEPRODUCTOADD(
    IN p_id INT,
    IN p_nombre VARCHAR(30),
    IN p_precio DOUBLE,
    IN p_cantidad INT,
    IN p_descripcion VARCHAR(130),
    IN p_estado ENUM('A','I')
)
BEGIN
    UPDATE PRODUCTOADICIONAL
    SET 
        NOMBRE_PRODUCTOADD = p_nombre,
        PRECIO_PRODUCTOADD = p_precio,
        CANTIDAD_PRODUCTOADD = p_cantidad,
        DESCRIPCION_PRODUCTOADD = p_descripcion,
        ESTADO_PRODUCTOADD = p_estado
    WHERE ID_PRODUCTOADD = p_id;
END //
DELIMITER ;



-----SELECCION
-----SOLO ACTIVOS Y/O POR CARGO
DELIMITER //
CREATE PROCEDURE CONSULTACLIENTE(
    IN searchTerm VARCHAR(255)
)
BEGIN
    SELECT C.ID_CLIENTE, C.ESTADO_CLIENTE, P.CC_PERSONA, P.NOMBRES_PERSONA, P.APELLIDOS_PERSONA
    FROM CLIENTE C
    INNER JOIN PERSONA AS P ON C.FK_ID_PERSONA = P.CC_PERSONA
    WHERE C.ESTADO_CLIENTE = 'A'
    AND (P.NOMBRES_PERSONA LIKE CONCAT('%', searchTerm, '%')
    OR P.APELLIDOS_PERSONA LIKE CONCAT('%', searchTerm, '%')
    OR P.CC_PERSONA LIKE CONCAT('%', searchTerm, '%'));
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE CONSULTAEMPLEADO()
BEGIN
    SELECT E.ID_EMPLEADO, P.CC_PERSONA, P.NOMBRES_PERSONA, P.APELLIDOS_PERSONA
    FROM EMPLEADO E
    INNER JOIN PERSONA AS P ON E.FK_ID_PERSONA = P.CC_PERSONA
    WHERE E.ESTADO_EMPLEADO = 'A' AND E.CARGO_EMPLEADO = 'LAVADOR';
END//
DELIMITER ;

DELIMITER //
CREATE PROCEDURE CONSULTATPVEHICULO()
BEGIN
    SELECT ID_TIPOVEHI, NOMBRE_TIPOVEHI
    FROM TIPOVEHICULO
    WHERE ESTADO_TIPOVEHI = 'A';
END//
DELIMITER ;

DELIMITER //
CREATE PROCEDURE CONSULTARCTVEHICULOV(
    IN cv_id_tipo INT
)
BEGIN
    SELECT  CV.ID_CATVEHICULO, CV.NOMBRE_CATVEHICULO
    FROM CATVEHICULO CV
    INNER JOIN TIPOVEHICULO AS TP ON CV.FK_ID_TIPOVEHI = TP.ID_TIPOVEHI
    WHERE TP.ID_TIPOVEHI = cv_id_tipo;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE CONSULTARCLVEHICULO(
    IN cliente_id INT
)
BEGIN
    SELECT V.PLACA_VEHICULO, V.MARCA_VEHICULO, V.MODELO_VEHICULO
    FROM VEHICULO V
    INNER JOIN CLIENTE AS C ON V.FK_ID_CLIENTE = C.ID_CLIENTE
    WHERE C.ID_CLIENTE = cliente_id;
END//
DELIMITER ;

DELIMITER //
CREATE PROCEDURE CONSULTARTPSERVICIO (
    IN placa_vehiculo VARCHAR(6)
)
BEGIN
    DECLARE tipoVehiculo VARCHAR(15);
    DECLARE estadoTipoServicio ENUM('V', 'M');
    -- Obtener el tipo de vehículo 
    SELECT NOMBRE_TIPOVEHI INTO tipoVehiculo
    FROM VEHICULO V
    INNER JOIN CATVEHICULO AS CV ON V.FK_ID_CATVEHICULO = CV.ID_CATVEHICULO
    INNER JOIN TIPOVEHICULO AS TPV ON CV.FK_ID_TIPOVEHI = TPV.ID_TIPOVEHI
    WHERE V.PLACA_VEHICULO = placa_vehiculo;

    IF tipoVehiculo = 'AUTOMOVIL' THEN
        SET estadoTipoServicio = 'V';
    ELSE
        SET estadoTipoServicio = 'M';
    END IF;
    
    SELECT ID_TIPOSER, NOMBRE_TIPOSER, VALOR_TIPOSER
    FROM TIPOSERVICIO
    WHERE ESTADO_TIPOSER = estadoTipoServicio;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE CONSULTARCTVEHICULO(
    IN placa_vehiculo VARCHAR(6)
)
BEGIN
    SELECT CV.ID_CATVEHICULO 
    FROM VEHICULO V
    JOIN CATVEHICULO AS CV ON V.FK_ID_CATVEHICULO = CV.ID_CATVEHICULO
    WHERE V.PLACA_VEHICULO = placa_vehiculo;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE PRECIOSERVICIO(
    IN tp_FK_ID_TIPOSER INT,
    IN cv_FK_ID_CATVEHICULO INT
)
BEGIN
    DECLARE v_Precio DOUBLE;
    SET v_Precio = VALOR_CATGTPSERVI(tp_FK_ID_TIPOSER, cv_FK_ID_CATVEHICULO);
    SELECT v_Precio AS precio;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE CONSULTARMOTIVOSM()
BEGIN
    SELECT ID_MOTIVOM, NOMBRE_MOTIVOM
    FROM MOTIVOM
    WHERE ESTADO_MOTIVOM = 'A';
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE CONSULTARPRODADD()
BEGIN
    SELECT PA.ID_PRODUCTOADD, PA.NOMBRE_PRODUCTOADD, PA.CANTIDAD_PRODUCTOADD
    FROM PRODUCTOADICIONAL PA
    WHERE PA.ESTADO_PRODUCTOADD = 'A';
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE CONSULTAFACTURASPORFECHA(
    IN fecha_inicio DATE,
    IN fecha_fin DATE
)
BEGIN
    -- Para las facturas pagadas dentro del rango de fechas
    SELECT fs.ID_FACTURASER, fs.VALOR_FACTURASER, tmp.NOMBRE_TIPOMETODOPAGO
    FROM FACTURASERVICIO fs
    INNER JOIN METODOPAGO mp ON fs.ID_FACTURASER = mp.FK_ID_FACTURASER
    INNER JOIN TIPOMETODOPAGO tmp ON mp.FK_ID_TIPOMETODOPAGO = tmp.ID_TIPOMETODOPAGO
    WHERE fs.ESTADO_FACTURASER = 'P'
    AND fs.FECHA_FACTURASER BETWEEN fecha_inicio AND fecha_fin;

    -- Para las facturas no pagadas dentro del rango de fechas
    SELECT fs.ID_FACTURASER, fs.VALOR_FACTURASER
    FROM FACTURASERVICIO fs
    LEFT JOIN METODOPAGO mp ON fs.ID_FACTURASER = mp.FK_ID_FACTURASER
    WHERE fs.ESTADO_FACTURASER = 'A'
    AND fs.FECHA_FACTURASER BETWEEN fecha_inicio AND fecha_fin
    AND mp.ID_METODOPAGO IS NULL; 
END//
DELIMITER ;

DELIMITER //
CREATE PROCEDURE CONSULTARTIPOMETODPA()
BEGIN
    SELECT TM.ID_TIPOMETODOPAGO, TM.NOMBRE_TIPOMETODOPAGO
    FROM TIPOMETODOPAGO TM
    WHERE TM.ESTADO_TIPOMETODOPAGO = 'A';
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE CONSULTARVALARSEMANAEMPLEADOS(
    IN fechainicio DATE,
    IN fechafinal DATE,
    IN valor_hora DECIMAL(10, 2)
)
BEGIN
    -- Obtener la cantidad de reservas por empleado y calcular el valor semanal para cada empleado
    SELECT
        COUNT(r.ID_RESERVA) AS Cantidad_Reservas,
        p.NOMBRES_PERSONA AS Nombres_Empleado,
        p.APELLIDOS_PERSONA AS Apellidos_Empleado,
        COUNT(r.ID_RESERVA) * valor_hora AS Valor_Semanal
    FROM
        RESERVA r
    INNER JOIN
        EMPLEADO e ON r.FK_ID_EMPLEADO = e.ID_EMPLEADO
    INNER JOIN
        PERSONA p ON e.FK_ID_PERSONA = p.CC_PERSONA
    WHERE
        e.CARGO_EMPLEADO = 'LAVADOR'
        AND r.ESTADO_RESERVA = 'F'
        AND r.FECHA_RESERVA BETWEEN fechainicio AND fechafinal
    GROUP BY
        e.ID_EMPLEADO, p.NOMBRES_PERSONA, p.APELLIDOS_PERSONA;
END //
DELIMITER ;

-----TODOS
DELIMITER //
CREATE PROCEDURE CONSULTAR_TIPOSERVICIOS()
BEGIN
    SELECT ID_TIPOSER, NOMBRE_TIPOSER, 
    VALOR_TIPOSER, ESTADO_TIPOSER, 
    DESCRIPCION_TIPOSER
    FROM TIPOSERVICIO;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE CONSULTARPRODUCTOADD()
BEGIN
    SELECT ID_PRODUCTOADD, NOMBRE_PRODUCTOADD, 
    PRECIO_PRODUCTOADD, CANTIDAD_PRODUCTOADD, 
    DESCRIPCION_PRODUCTOADD, ESTADO_PRODUCTOADD
    FROM PRODUCTOADICIONAL;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE CONSULTARTCLIENTES()
BEGIN
    SELECT C.ID_CLIENTE, C.ESTADO_CLIENTE, 
    P.CC_PERSONA, P.NOMBRES_PERSONA, 
    P.APELLIDOS_PERSONA, P.FECHANTO_PERSONA,
    P.EDAD_PERSONA, P.TELEFONO_PERSONA,
    P.CORREO_PERSONA, P.DIRECCION_PERSONA
    FROM CLIENTE C
    INNER JOIN PERSONA AS P ON C.FK_ID_PERSONA = P.CC_PERSONA;
END//
DELIMITER ;

DELIMITER //
CREATE PROCEDURE CONSULTARTEMPLEADOS()
BEGIN
    SELECT E.ID_EMPLEADO, E.ESTADO_EMPLEADO, E.CARGO_EMPLEADO,
           CR.USUARIO_CREDENCIALES, CR.CONTRASENA_CREDENCIALES,
           P.CC_PERSONA, P.NOMBRES_PERSONA, P.APELLIDOS_PERSONA,
           P.FECHANTO_PERSONA, P.EDAD_PERSONA, P.TELEFONO_PERSONA, 
           P.CORREO_PERSONA, P.DIRECCION_PERSONA
    FROM EMPLEADO E
    INNER JOIN PERSONA P ON E.FK_ID_PERSONA = P.CC_PERSONA
    INNER JOIN CREDENCIALES CR ON E.FK_ID_CREDENCIALES = CR.ID_CREDENCIALES;
END//
DELIMITER ;

DELIMITER //
CREATE PROCEDURE CONSULTARVHCLIENTE(
    IN cliente_id INT
)
BEGIN
    SELECT PLACA_VEHICULO,
           MARCA_VEHICULO
    FROM VEHICULO 
    INNER JOIN CLIENTE AS C ON FK_ID_CLIENTE = C.ID_CLIENTE
    WHERE FK_ID_CLIENTE = cliente_id;
END //
DELIMITER ;

DELIMITER //

CREATE PROCEDURE CONSULTARSERVICIOSFECHA(
    IN p_fecha DATE
)
BEGIN
    SELECT
        S.ID_SERVICIO,
        R.ID_RESERVA,
        R.FECHA_RESERVA,
        R.HORA_RESERVA,
        R.ESTADO_RESERVA,
        R.FK_ID_VEHICULO,
        CV.ID_CATVEHICULO AS fk_id_catvehiculo,
        CV.NOMBRE_CATVEHICULO,
        E.ID_EMPLEADO AS empleado_id,
        CONCAT(PE.NOMBRES_PERSONA, ' ', PE.APELLIDOS_PERSONA) AS Nombre_Empleado,
        CONCAT(PC.NOMBRES_PERSONA, ' ', PC.APELLIDOS_PERSONA) AS Nombre_Cliente,
        TS.ID_TIPOSER AS fk_id_tipoSer,
        TS.NOMBRE_TIPOSER,
        CTS.VALOR_CTGTPSERVICIO,
        IFNULL(SUM(M.VALOR_MULTA), 0) AS Valor_Multa,
        IFNULL(SUM(SP.COSTO_SERVPROADD), 0) AS costo_servproadd 
    FROM  SERVICIO S
    INNER JOIN RESERVA AS R ON S.FK_ID_RESERVA = R.ID_RESERVA
    INNER JOIN CTG_TPSERVICIO AS CTS ON S.FK_ID_CTGTPSERVICIO = CTS.ID_CTGTPSERVICIO
    INNER JOIN TIPOSERVICIO AS TS ON CTS.FK_ID_TIPOSER = TS.ID_TIPOSER
    INNER JOIN EMPLEADO AS E ON R.FK_ID_EMPLEADO = E.ID_EMPLEADO
    INNER JOIN PERSONA AS PE ON E.FK_ID_PERSONA = PE.CC_PERSONA
    INNER JOIN VEHICULO AS V ON R.FK_ID_VEHICULO = V.PLACA_VEHICULO
    INNER JOIN CLIENTE AS C ON V.FK_ID_CLIENTE = C.ID_CLIENTE
    INNER JOIN PERSONA AS PC ON C.FK_ID_PERSONA = PC.CC_PERSONA
    INNER JOIN CATVEHICULO AS CV ON V.FK_ID_CATVEHICULO = CV.ID_CATVEHICULO 
    LEFT JOIN MULTA AS M ON R.ID_RESERVA = M.FK_ID_RESERVA
    LEFT JOIN SERVPROADD AS SP ON S.ID_SERVICIO = SP.FK_ID_SERVICIO 
    WHERE R.FECHA_RESERVA = p_fecha
    GROUP BY S.ID_SERVICIO;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE CONSULTARPRODUCTOSSERVICIO(
    IN p_id_servicio INT
)
BEGIN
    SELECT
        SP.FK_ID_SERVICIO,
        PA.NOMBRE_PRODUCTOADD,
        PA.PRECIO_PRODUCTOADD,
        PA.DESCRIPCION_PRODUCTOADD,
        SP.CANTIDAD_SERVPROADD,
        SP.COSTO_SERVPROADD
    FROM
        SERVPROADD AS SP
    INNER JOIN
        PRODUCTOADICIONAL AS PA ON SP.FK_ID_PRODUCTOADD = PA.ID_PRODUCTOADD
    WHERE
        SP.FK_ID_SERVICIO = p_id_servicio;
END;
//
DELIMITER ;

DELIMITER //
CREATE PROCEDURE CONSULTARFACTURA(
    IN p_fecha_reserva DATE,
    IN p_placa_vehiculo VARCHAR(6)
)
BEGIN
    SELECT
        fs.ID_FACTURASER,  
        pc.NOMBRES_PERSONA AS NOMBRES_CLIENTE,
        pc.APELLIDOS_PERSONA AS APELLIDOS_CLIENTE,
        v.PLACA_VEHICULO,
        tv.NOMBRE_TIPOVEHI,
        cv.NOMBRE_CATVEHICULO,
        pe.NOMBRES_PERSONA AS NOMBRES_EMPLEADO,
        pe.APELLIDOS_PERSONA AS APELLIDOS_EMPLEADO,
        ts.NOMBRE_TIPOSER AS NOMBRE_TIPOSERVICIO,
        ctp.VALOR_CTGTPSERVICIO AS VALOR_SERVICIO,
        pa.NOMBRE_PRODUCTOADD,
        pa.PRECIO_PRODUCTOADD,
        sp.CANTIDAD_SERVPROADD,
        sp.COSTO_SERVPROADD,
        fs.VALOR_FACTURASER AS TOTAL_FACTURA
    FROM
        RESERVA r
        JOIN VEHICULO v ON r.FK_ID_VEHICULO = v.PLACA_VEHICULO
        JOIN CLIENTE c ON v.FK_ID_CLIENTE = c.ID_CLIENTE
        JOIN PERSONA pc ON c.FK_ID_PERSONA = pc.CC_PERSONA
        JOIN EMPLEADO e ON r.FK_ID_EMPLEADO = e.ID_EMPLEADO
        JOIN PERSONA pe ON e.FK_ID_PERSONA = pe.CC_PERSONA
        JOIN SERVICIO s ON r.ID_RESERVA = s.FK_ID_RESERVA
        JOIN CTG_TPSERVICIO ctp ON s.FK_ID_CTGTPSERVICIO = ctp.ID_CTGTPSERVICIO
        JOIN TIPOSERVICIO ts ON ctp.FK_ID_TIPOSER = ts.ID_TIPOSER
        LEFT JOIN SERVPROADD sp ON s.ID_SERVICIO = sp.FK_ID_SERVICIO
        LEFT JOIN PRODUCTOADICIONAL pa ON sp.FK_ID_PRODUCTOADD = pa.ID_PRODUCTOADD
        LEFT JOIN CATVEHICULO cv ON v.FK_ID_CATVEHICULO = cv.ID_CATVEHICULO
        LEFT JOIN TIPOVEHICULO tv ON cv.FK_ID_TIPOVEHI = tv.ID_TIPOVEHI
        LEFT JOIN FACTURASERVICIO fs ON s.ID_SERVICIO = fs.FK_ID_SERVICIO
    WHERE
        r.FECHA_RESERVA = p_fecha_reserva
        AND r.ESTADO_RESERVA = 'F'
        AND v.PLACA_VEHICULO = p_placa_vehiculo;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE COSTOPRODADD(
    IN p_fk_id_productoadd INT, 
    IN p_cantidad_servproadd INT
)
BEGIN
    DECLARE v_precio DOUBLE;
    DECLARE v_costo DOUBLE;
    SELECT PRECIO_PRODUCTOADD INTO v_precio FROM PRODUCTOADICIONAL WHERE ID_PRODUCTOADD = p_fk_id_productoadd;
    SET v_costo = calcular_costo(v_precio, p_cantidad_servproadd);

    SELECT v_costo AS costo_servproadd;
END;
//
DELIMITER ;

DELIMITER //
CREATE PROCEDURE COSTOMULTA(
    IN p_id_reserva INT,
    IN p_id_motivo INT
)
BEGIN
    DECLARE v_valor_servicio DOUBLE;
    DECLARE v_valor_multa DOUBLE;
    
    SELECT VALOR_CTGTPSERVICIO INTO v_valor_servicio
    FROM CTG_TPSERVICIO AS CTS
    INNER JOIN SERVICIO AS S ON CTS.ID_CTGTPSERVICIO = S.FK_ID_CTGTPSERVICIO
    WHERE S.FK_ID_RESERVA = p_id_reserva;

    SET v_valor_multa = calcularMulta(v_valor_servicio, p_id_motivo);
    
    SELECT v_valor_multa AS valor_multa; 
END //
DELIMITER ;

-----RESERVA HORA EMPLEADO DISPONIBLE
DELIMITER //
CREATE PROCEDURE VERIFDISPONIBLEEMPL(
    IN empleadoId INT,
    IN fechaReserva DATE,
    IN horaReserva VARCHAR(8),
    OUT disponibilidad VARCHAR(20)
)
BEGIN
    DECLARE reservaCount INT;
    -- Contar el número de reservas para el empleado en el mismo horario
    SELECT COUNT(*) INTO reservaCount
    FROM RESERVA
    WHERE FK_ID_EMPLEADO = empleadoId AND FECHA_RESERVA = fechaReserva AND HORA_RESERVA = horaReserva AND ESTADO_RESERVA = 'A';
    -- Si hay alguna reserva para el empleado en ese horario, establecer disponibilidad en "No disponible"
    IF reservaCount > 0 THEN
        SET disponibilidad = 'No disponible';
    ELSE
        SET disponibilidad = 'Empleado disponible';
    END IF;
END //
DELIMITER ;


------DELETE
DELIMITER //

CREATE PROCEDURE ELIMINARCLIENTE(
    IN p_idCliente INT
)
BEGIN
    DECLARE persona_id INT;

    SELECT FK_ID_PERSONA INTO persona_id FROM CLIENTE WHERE ID_CLIENTE = p_idCliente;
    DELETE FROM VEHICULO WHERE FK_ID_CLIENTE = p_idCliente;
    DELETE FROM CLIENTE WHERE ID_CLIENTE = p_idCliente;
    DELETE FROM PERSONA WHERE CC_PERSONA = persona_id;
END //

DELIMITER ;



DELIMITER //
CREATE PROCEDURE ELIMINAREMPLEADO(
    IN p_idEmpleado INT
)
BEGIN
    DECLARE credenciales_id INT;
    DECLARE persona_id INT;
    SELECT FK_ID_CREDENCIALES INTO credenciales_id FROM EMPLEADO WHERE ID_EMPLEADO = p_idEmpleado;
    SELECT FK_ID_PERSONA INTO persona_id FROM EMPLEADO WHERE ID_EMPLEADO = p_idEmpleado;
    
    DELETE FROM EMPLEADO WHERE ID_EMPLEADO = p_idEmpleado;
    DELETE FROM CREDENCIALES WHERE ID_CREDENCIALES = credenciales_id;
    DELETE FROM PERSONA WHERE CC_PERSONA = persona_id;
END //
DELIMITER ;

----FUNCIONES  TRIGGERS
DELIMITER //
CREATE TRIGGER VERIFICAREDADPERSONA 
BEFORE INSERT ON PERSONA
FOR EACH ROW
BEGIN
    DECLARE edad INT;
    DECLARE fecha_nacimiento DATE;
    SET fecha_nacimiento = NEW.FECHANTO_PERSONA;
    SET edad = TIMESTAMPDIFF(YEAR, fecha_nacimiento, CURDATE());
    IF edad < 18 THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'La persona es menor de 18 años';
    END IF;
END;
//
DELIMITER ;


DELIMITER //
CREATE TRIGGER CALCULAREDADPERSONA
BEFORE INSERT ON PERSONA
FOR EACH ROW
BEGIN
    DECLARE fecha_nacimiento DATE;
    DECLARE edad INT;
    SET fecha_nacimiento = NEW.FECHANTO_PERSONA;
    SET edad = YEAR(CURDATE()) - YEAR(fecha_nacimiento);
    IF (MONTH(CURDATE()) < MONTH(fecha_nacimiento) OR
        (MONTH(CURDATE()) = MONTH(fecha_nacimiento) AND DAY(CURDATE()) < DAY(fecha_nacimiento))) THEN
        SET edad = edad - 1;
    END IF;
    SET NEW.EDAD_PERSONA = edad;
END;
//
DELIMITER ;

DELIMITER //
CREATE TRIGGER CALCULAREDADPERSONAUPDATE
BEFORE UPDATE ON PERSONA
FOR EACH ROW
BEGIN
    DECLARE fecha_nacimiento DATE;
    DECLARE edad INT;
    SET fecha_nacimiento = NEW.FECHANTO_PERSONA;
    SET edad = YEAR(CURDATE()) - YEAR(fecha_nacimiento);
    IF (MONTH(CURDATE()) < MONTH(fecha_nacimiento) OR
        (MONTH(CURDATE()) = MONTH(fecha_nacimiento) AND DAY(CURDATE()) < DAY(fecha_nacimiento))) THEN
        SET edad = edad - 1;
    END IF;
    SET NEW.EDAD_PERSONA = edad;
END;
//
DELIMITER ;

DELIMITER //
CREATE FUNCTION VALOR_CATGTPSERVI(
    FK_ID_TIPOSER INT, 
    FK_ID_CATVEHICULO INT
) RETURNS DOUBLE
BEGIN
    DECLARE valor_tipo DOUBLE;
    DECLARE categoria VARCHAR(20);
    DECLARE valor_ctgtpservicio DOUBLE;
    DECLARE porcentaje DOUBLE;

    SELECT VALOR_TIPOSER INTO valor_tipo FROM TIPOSERVICIO WHERE ID_TIPOSER = FK_ID_TIPOSER;
    SELECT NOMBRE_CATVEHICULO INTO categoria FROM CATVEHICULO WHERE ID_CATVEHICULO = FK_ID_CATVEHICULO;

    CASE categoria
        WHEN 'AUTOMOVIL' THEN
            SET porcentaje = 0.00;
        WHEN 'CAMIONETA' THEN
            SET porcentaje = 0.10;
        WHEN 'CAMPERO' THEN
            SET porcentaje = 0.15;
        WHEN 'AUTOBUS' THEN
            SET porcentaje = 0.20;
        WHEN 'SCOOTER' THEN
            SET porcentaje = 0.00;
        WHEN 'URBANAS CC200' THEN
            SET porcentaje = 0.10;
        WHEN 'MAXISCOOTER' THEN
            SET porcentaje = 0.15;
        WHEN 'CARRETERA CC250' THEN
            SET porcentaje = 0.20;
        WHEN 'MOTOCROSS' THEN
            SET porcentaje = 0.25;
        ELSE
            SET porcentaje = 0.00;
    END CASE;
    SET valor_ctgtpservicio = valor_tipo + (valor_tipo * porcentaje);
    RETURN valor_ctgtpservicio;
END //
DELIMITER ;

DELIMITER //
CREATE TRIGGER TG_BI_VCTSERVICIO 
BEFORE INSERT ON CTG_TPSERVICIO
FOR EACH ROW
BEGIN
    DECLARE valor_ctgtpservicio DOUBLE;
    SET valor_ctgtpservicio = VALOR_CATGTPSERVI(NEW.FK_ID_TIPOSER, NEW.FK_ID_CATVEHICULO);
    SET NEW.VALOR_CTGTPSERVICIO = valor_ctgtpservicio;
END //
DELIMITER ;

DELIMITER //
CREATE TRIGGER TG_BU_VCTSERVICIO 
BEFORE UPDATE ON CTG_TPSERVICIO
FOR EACH ROW
BEGIN
    DECLARE valor_ctgtpservicio DOUBLE;
    SET valor_ctgtpservicio = VALOR_CATGTPSERVI(NEW.FK_ID_TIPOSER, NEW.FK_ID_CATVEHICULO);
    SET NEW.VALOR_CTGTPSERVICIO = valor_ctgtpservicio;
END //
DELIMITER ;

DELIMITER //
CREATE FUNCTION calcularMulta(
    valorServicio DOUBLE, 
    idMotivo INT
) RETURNS DOUBLE
BEGIN
    DECLARE valorMulta DOUBLE;
    IF idMotivo = 1 THEN
        SET valorMulta = 0;
    ELSEIF idMotivo = 2 THEN
        SET valorMulta = valorServicio * 0.1;
    ELSEIF idMotivo = 3 THEN
        SET valorMulta = valorServicio * 0.2;
    ELSEIF idMotivo = 4 THEN
        SET valorMulta = valorServicio * 0.3;
    ELSE
        SET valorMulta = 0;
    END IF;
    
    RETURN valorMulta;
END //
DELIMITER ;

DELIMITER //
CREATE TRIGGER TG_BI_VALORMULTA
 BEFORE INSERT ON MULTA
FOR EACH ROW
BEGIN
    DECLARE valorServicio DOUBLE;

    SELECT VALOR_CTGTPSERVICIO INTO valorServicio
    FROM CTG_TPSERVICIO
    INNER JOIN SERVICIO ON CTG_TPSERVICIO.FK_ID_TIPOSER = SERVICIO.FK_ID_CTGTPSERVICIO
    WHERE SERVICIO.ID_SERVICIO = NEW.FK_ID_RESERVA;

    SET NEW.VALOR_MULTA = calcularMulta(valorServicio, NEW.FK_ID_MOTIVOM);
END //
DELIMITER ;

DELIMITER //
CREATE FUNCTION calcular_costo(
    precio DOUBLE, 
    cantidad INT
)
RETURNS DOUBLE
BEGIN
    DECLARE total_cost DOUBLE;
    SET total_cost = precio * cantidad;
    RETURN total_cost;
END;
//
DELIMITER ;

DELIMITER //
CREATE TRIGGER TG_BI_COSTOSERPROADD
BEFORE INSERT ON SERVPROADD
FOR EACH ROW
BEGIN
    SET NEW.COSTO_SERVPROADD = calcular_costo(
        (SELECT PRECIO_PRODUCTOADD FROM PRODUCTOADICIONAL WHERE ID_PRODUCTOADD = NEW.FK_ID_PRODUCTOADD),
        NEW.CANTIDAD_SERVPROADD
    );
END;
//
DELIMITER ;

DELIMITER //
CREATE TRIGGER TU_AI_RESERVA
AFTER INSERT ON MULTA
FOR EACH ROW
BEGIN
    UPDATE RESERVA
    SET ESTADO_RESERVA = 'C'
    WHERE ID_RESERVA = NEW.FK_ID_RESERVA;
END //
DELIMITER ;

DELIMITER //
CREATE TRIGGER TC_BI_VALORFACTURAS
BEFORE INSERT ON FACTURASERVICIO
FOR EACH ROW
BEGIN
    DECLARE total_servicios DECIMAL(10, 2);
    DECLARE total_adicionales DECIMAL(10, 2);
    -- Calcular el total de servicios
    SELECT SUM(ctp.VALOR_CTGTPSERVICIO)
    INTO total_servicios
    FROM SERVICIO s
    JOIN CTG_TPSERVICIO ctp ON s.FK_ID_CTGTPSERVICIO = ctp.ID_CTGTPSERVICIO
    WHERE s.ID_SERVICIO = NEW.FK_ID_SERVICIO;
    -- Calcular el total de servicios adicionales
    SELECT SUM(sp.COSTO_SERVPROADD)
    INTO total_adicionales
    FROM SERVPROADD sp
    JOIN SERVICIO s ON sp.FK_ID_SERVICIO = s.ID_SERVICIO
    WHERE s.ID_SERVICIO = NEW.FK_ID_SERVICIO;
   
    SET NEW.VALOR_FACTURASER = IFNULL(total_servicios, 0) + IFNULL(total_adicionales, 0);
END //
DELIMITER ;

DELIMITER //
CREATE TRIGGER TG_BU_ACTUALIZAR_ESTADO
BEFORE UPDATE ON PRODUCTOADICIONAL
FOR EACH ROW
BEGIN
    IF NEW.CANTIDAD_PRODUCTOADD = 0 THEN
        SET NEW.estado_productoadd = 'I';
    END IF;
END //

DELIMITER ;

----AUDITORIAS
DELIMITER //
CREATE TRIGGER TG_AU_AUCREDENCIALES
AFTER UPDATE ON CREDENCIALES
FOR EACH ROW
BEGIN
    DECLARE nombresPersona VARCHAR(40);
    DECLARE apellidosPersona VARCHAR(40);

    SELECT NOMBRES_PERSONA, APELLIDOS_PERSONA
    INTO nombresPersona, apellidosPersona
    FROM PERSONA
    INNER JOIN EMPLEADO ON PERSONA.CC_PERSONA = EMPLEADO.FK_ID_PERSONA
    WHERE EMPLEADO.FK_ID_CREDENCIALES = OLD.ID_CREDENCIALES;
    INSERT INTO AUDITORIA_CREDENCIALES (
        NOMBRES_PERSONA,
        APELLIDOS_PERSONA,
        USUARIO_ANTERIOR,
        CONTRASENA_ANTERIOR,
        ESTADO_ANTERIOR,
        FECHA_MODIFICACION,
        NUEVO_USUARIO,
        NUEVA_CONTRASENA,
        NUEVO_ESTADO,
        OPERACION,
        MODIFICADO_POR
    ) VALUES (
        nombresPersona,
        apellidosPersona,
        OLD.USUARIO_CREDENCIALES,
        OLD.CONTRASENA_CREDENCIALES,
        OLD.ESTADO_CREDENCIALES,
        NOW(),
        NEW.USUARIO_CREDENCIALES,
        NEW.CONTRASENA_CREDENCIALES,
        NEW.ESTADO_CREDENCIALES,
        'UPDATE',
        CURRENT_USER()
    );
END//
DELIMITER ;

DELIMITER //
CREATE TRIGGER TG_BD_AUELIMINARCLIENTE
BEFORE DELETE ON CLIENTE
FOR EACH ROW
BEGIN
    DECLARE vehiculos TEXT;
    DECLARE reserva_info TEXT;

    SELECT GROUP_CONCAT(PLACA_VEHICULO SEPARATOR ', ') INTO vehiculos
    FROM VEHICULO
    WHERE FK_ID_CLIENTE = OLD.ID_CLIENTE;

    SELECT GROUP_CONCAT(CONCAT('ID_RESERVA: ', ID_RESERVA, ', FECHA_RESERVA: ', FECHA_RESERVA, ', HORA_RESERVA: ', HORA_RESERVA, ', PLACA_VEHICULO: ', FK_ID_VEHICULO) SEPARATOR '; ')
    INTO reserva_info
    FROM RESERVA
    WHERE FK_ID_VEHICULO IN (SELECT PLACA_VEHICULO FROM VEHICULO WHERE FK_ID_CLIENTE = OLD.ID_CLIENTE);

    INSERT INTO AUDITORIA_ELIMINACION_CLIENTE (
        CC_PERSONA,
        NOMBRES_PERSONA,
        APELLIDOS_PERSONA,
        PLACAS_VEHICULOS,
        RESERVAS_INFO,
        OPERACION,
        FECHA,
        USUARIO_CREDENCIAL
    )
    SELECT
        p.CC_PERSONA,
        p.NOMBRES_PERSONA,
        p.APELLIDOS_PERSONA,
        vehiculos,
        reserva_info,
        'DELETE',
        NOW(),
        'FALTACOLOCARUSUARIO'
    FROM PERSONA p
    WHERE p.CC_PERSONA = OLD.FK_ID_PERSONA;
END //
DELIMITER ;


DELIMITER //
CREATE TRIGGER TG_BU_AURESERVA
BEFORE UPDATE ON RESERVA
FOR EACH ROW
BEGIN
    IF NEW.ESTADO_RESERVA = 'C' THEN
        INSERT INTO AUDITORIA_RESERVA (
            ID_RESERVA,
            FECHA_RESERVA,
            HORA_RESERVA,
            PLACA_VEHICULO,
            NOMBRES_CLIENTE,
            APELLIDOS_CLIENTE,
            NOMBRES_EMPLEADO,
            APELLIDOS_EMPLEADO,
            FECHA_MODIFICACION,
            NOMBRE_MOTIVOM,
            USUARIO_CREDENCIALES,
            OPERACION
        )
        SELECT
            OLD.ID_RESERVA,
            OLD.FECHA_RESERVA,
            OLD.HORA_RESERVA,
            OLD.FK_ID_VEHICULO,
            P_CLIENTE.NOMBRES_PERSONA,
            P_CLIENTE.APELLIDOS_PERSONA,
            P_EMPLEADO.NOMBRES_PERSONA,
            P_EMPLEADO.APELLIDOS_PERSONA,
            NOW(),
            M.NOMBRE_MOTIVOM,
            CRED.USUARIO_CREDENCIALES,
            'Cancelacion Reserva'
        FROM
            CLIENTE C
            JOIN PERSONA P_CLIENTE ON C.FK_ID_PERSONA = P_CLIENTE.CC_PERSONA
            JOIN VEHICULO V ON C.ID_CLIENTE = V.FK_ID_CLIENTE
            JOIN RESERVA R ON V.PLACA_VEHICULO = R.FK_ID_VEHICULO
            JOIN EMPLEADO E ON R.FK_ID_EMPLEADO = E.ID_EMPLEADO
            JOIN PERSONA P_EMPLEADO ON E.FK_ID_PERSONA = P_EMPLEADO.CC_PERSONA
            JOIN CREDENCIALES CRED ON E.FK_ID_CREDENCIALES = CRED.ID_CREDENCIALES
            LEFT JOIN MULTA MU ON R.ID_RESERVA = MU.FK_ID_RESERVA
            LEFT JOIN MOTIVOM M ON MU.FK_ID_MOTIVOM = M.ID_MOTIVOM
        WHERE
            R.ID_RESERVA = OLD.ID_RESERVA;
    END IF;
END//
DELIMITER ;

/*ME SUMA SIEMPRE
DELIMITER //
CREATE TRIGGER TG_BU_CANTIDADPROADD
BEFORE UPDATE ON PRODUCTOADICIONAL
FOR EACH ROW
BEGIN
    SET NEW.CANTIDAD_PRODUCTOADD = OLD.CANTIDAD_PRODUCTOADD + NEW.CANTIDAD_PRODUCTOADD;
END //
DELIMITER ;
*/



